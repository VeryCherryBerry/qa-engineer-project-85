---
- summary: |
    Проверка регистрации нового пользователя с электронной почтой
  requirement: |
    При регистрации с новой электронной почты пользователь должен успешно зарегистрироваться
  prerequisites: |
    Открыта страница регистрации https://codebattle.hexlet.io/users/new?locale=en&next=%2F
  test-data: |
    emai = example@gmail.com Пароль = password Nickname = Olya
  steps:
    - Вводим никнейм
    - Вводим электронную почту
    - Вводим пароль
    - Повторяем ввод пароля
    - Нажимаем кнопку Submit
  expected-result: |
    Пользователь успешно зарегистрирован
    
- summary: |
    Проверка регистрации нового пользователя с неправильной электронной почтой
  requirement: |
    Система должна сообщить, что пользователь ошибся при вводе электронной почты
  prerequisites: |
    Открыта страница регистрации https://codebattle.hexlet.io/users/new?locale=en&next=%2F
  test-data: |
    emai = example.com Пароль = password Nickname = Olya
  steps:
    - Вводим никнейм
    - Вводим электронную почту
    - Вводим пароль
    - Повторяем ввод пароля
    - Нажимаем кнопку Submit
  expected-result: |
    Пользователь не зарегистрирован, появилось сообщение об ошибке в написании email
    
- summary: |
    Проверка регистрации нового пользователя с паролем, содержащим меньше 6 знаков
  requirement: |
    Система должна сообщить, что пользователь ошибся при вводе пароля
  prerequisites: |
    Открыта страница регистрации https://codebattle.hexlet.io/users/new?locale=en&next=%2F
  test-data: |
    emai = example@gmail.com Пароль = passw Nickname = Olya
  steps:
    - Вводим никнейм
    - Вводим электронную почту
    - Вводим пароль
    - Повторяем ввод пароля
    - Нажимаем кнопку Submit
  expected-result: |
    Пользователь не зарегистрирован, появилось сообщение о длине пароля
    
- summary: |
    Проверка регистрации нового пользователя с паролем, содержащим больше 16 знаков
  requirement: |
    Система должна сообщить, что пользователь ошибся при вводе пароля
  prerequisites: |
    Открыта страница регистрации https://codebattle.hexlet.io/users/new?locale=en&next=%2F
  test-data: |
    emai = example@gmail.com Пароль = passwordpassword1 Nickname = Olya
  steps:
    - Вводим никнейм
    - Вводим электронную почту
    - Вводим пароль
    - Повторяем ввод пароля
    - Нажимаем кнопку Submit
  expected-result: |
    Пользователь не зарегистрирован, появилось сообщение о длине пароля

- summary: |
    Проверка регистрации нового пользователя с ошибкой в повторе пароля
  requirement: |
    Система должна сообщить, что пользователь ошибся при повторном вводе пароля
  prerequisites: |
    Открыта страница регистрации https://codebattle.hexlet.io/users/new?locale=en&next=%2F
  test-data: |
    emai = example@gmail.com Пароль = password Проверочный пароль = PaSSword Nickname = Olya
  steps:
    - Вводим никнейм
    - Вводим электронную почту
    - Вводим пароль
    - Вводим проверочный пароль
    - Нажимаем кнопку Submit
  expected-result: |
    Пользователь не зарегистрирован, появилось сообщение о ошибке при повторе пароля

- summary: |
    Проверка входа пользователя с существующими логином и паролем
  requirement: |
    При верном вводе логине и пароля пользователь должен войти в систему
  prerequisites: |
    Открыта страница логина https://codebattle.hexlet.io/session/new?locale=en&next=%2F
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Вводим email
    - Вводим пароль
    - Нажимаем кнопку Submit
  expected-result: |
    Пользователь должен попасть на главную страницу
    
- summary: |
    Проверка входа пользователя с неправильными логином и паролем
  requirement: |
    Система должна сообщить об ошибке в логине и/или пароле
  prerequisites: |
    Открыта страница логина https://codebattle.hexlet.io/session/new?locale=en&next=%2F
  test-data: |
    emai = example.com Пароль = passwordpassword1
  steps:
    - Вводим email
    - Вводим пароль
    - Нажимаем кнопку Submit
  expected-result: |
    Вход не выполнен, появилось сообщение об ошибке
    
- summary: |
    Проверка входа пользователя через Github
  requirement: |
    Нажав на кнопку «sign in with Github» пользователь должен войти в систему
  prerequisites: |
    В браузере уже залогинен аккаунт Github, открыта страница логина https://codebattle.hexlet.io/session/new?locale=en&next=%2F
  test-data: |
    Github emai = example@gmail.com Пароль = password
  steps:
    - Нажимаем на кнопку «sign in with Github»
  expected-result: |
    Пользователь должен попасть на главную страницу
    
- summary: |
    Проверка входа пользователя через Discord
  requirement: |
    Нажав на кнопку «sign in with Discord» пользователь должен войти в систему
  prerequisites: |
    В браузере уже залогинен аккаунт Github, открыта страница логина https://codebattle.hexlet.io/session/new?locale=en&next=%2F
  test-data: |
    Discord emai = example@gmail.com Пароль = password
  steps:
    - Нажимаем на кнопку «sign in with Discord»
  expected-result: |
    Пользователь должен попасть на главную страницу
    
- summary: |
    Проверка восстановления пароля через электронную почту
  requirement: |
    У пользователя должна быть возможность восстановить пароль с помощью электронной почты
  prerequisites: |
    Открыта страница логина https://codebattle.hexlet.io/session/new?locale=en&next=%2F
  test-data: |
    Электронная почта emai = example@gmail.com Пароль Password
  steps:
    - Нажимаем на кнопку «log in»
    - Нажимаем на кнопку «Forgot your password?»
    - Переходим в электронную почту
  expected-result: |
    Пришло письмо для сброса пароля

- summary: |
    Проверка создания своей игры с ботом
  requirement: |
    У пользователя должна быть возможность создать свою игру с ботом и выбрать уровень сложности
  prerequisites: |
    Открыта главная страница сайта https://codebattle.hexlet.io/#lobby, выполнен вход 
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Нажимаем на кнопку «create a game»
    - Выбираем уровень сложности
    - Выбираем время
    - Выбираем «with a bot»
    - Выбираем «random task»
    - Нажимаем кнопку «Create battle»
  expected-result: |
    Пользователь попал в окно игры 
    
- summary: |
    Проверка создания своей игры с другом
  requirement: |
    У пользователя должна быть возможность прислать другу приглашение в игру
  prerequisites: |
    Открыта главная страница сайта https://codebattle.hexlet.io/#lobby, выполнен вход 
  test-data: |
    user 1 login password, user 2 login password
  steps:
    - Заходим за user1
    - Нажимаем на кнопку «create a game»
    - Выбираем уровень сложности
    - Выбираем время
    - Выбираем «with a friend»
    - Ищем ник друга
    - Выбираем «random task»
    - Нажимаем кнопку «Create battle»
    - Заходим за user2
  expected-result: |
    Другу пришло оповещение, по которому можно присоединиться к игре 
    
- summary: |
    Проверка создания своей игры с другим пользователем
  requirement: |
    У пользователя должна быть возможность создать свою игру, к которой может присоединиться другой пользователь
  prerequisites: |
    Открыта главная страница сайта https://codebattle.hexlet.io/#lobby, выполнен вход
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Нажимаем на кнопку «create a game»
    - Выбираем уровень сложности
    - Выбираем время
    - Выбираем «with other user»
    - Выбираем «random task»
    - Нажимаем кнопку «Create battle»
  expected-result: |
    Пользователь попал в окно игры
    
- summary: |
    Проверка возможности присоединиться к игре, созданной другим пользователем
  requirement: |
    У пользователя должна быть возможность присоединиться к открытой игре, созданной другим пользователем
  prerequisites: |
    Открыта главная страница сайта, выполнен вход за user1, предварительно создана открытая игра с аккаунта user2
  test-data: |
    user 1 login password, user 2 login password
  steps:
    - Нажимаем на кнопку «Fight» возле нужной игры
  expected-result: |
    Пользователь присоединился к игре
    
- summary: |
    Проверка смены языка программирования во время игры
  requirement: |
    У пользователя должна быть возможность изменить язык прямо в ходе игры
  prerequisites: |
    Выполнен вход, открыта заранее созданная игра 
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Нажимаем на выпадающий список языков
    - Выбираем любой язык, кроме того, который был изначально
  expected-result: |
    Сменился язык и код в поле ввода
    
- summary: |
    Проверка возможности продолжить игру после выхода соперника 
  requirement: |
    У пользователя должна быть возможность найти верное решение в игре после выхода соперника
  prerequisites: |
    Выполнен вход с двух аккаунтов в разных окнах браузера
  test-data: |
    user 1 login password, user 2 login password
  steps:
    - Заходим за user 1 и создаём игру «with a friend»
    - Заходим за user 2 и присоединяемся к игре
    - Заходим за user 1 и покидаем игру
  expected-result: |
    User 2 может продолжать кодить
    
- summary: |
    Проверка отображения в реальном времени кода, который пишет соперник 
  requirement: |
    У пользователя должна быть возможность видеть код соперника 
  prerequisites: |
    Выполнен вход с двух аккаунтов в разных окнах браузера
  test-data: |
    user 1 login password, user 2 login password
  steps:
    - Заходим за user 1 и создаём игру «with a friend»
    - Заходим за user 2 в другом браузере и присоединяемся к игре
    - Открываем два браузера на экране
    - Пишем код за user 2
    - Пишем код за user 1
  expected-result: |
    У обоих пользователей отображается код соперника в реальном времени
    
- summary: |
    Проверка отображения в реальном времени кода соперника при разной скорости соединения
  requirement: |
    У пользователя должна быть возможность видеть код соперника даже при низкой скорости соединения у одного из игроков
  prerequisites: |
    Выполнен вход с двух аккаунтов в разных окнах браузера
  test-data: |
    user 1 login password, user 2 login password
  steps:
    - Заходим за user 1 и создаём игру «with a friend»
    - Заходим за user 2 в другом браузере и присоединяемся к игре
    - Открываем два браузера на экране
    - Заходим за user 2 и с помощью DevTools понижаем скорость интернета до low-end mobile
    - Пишем код за user 2
    - Пишем код за user 1
  expected-result: |
    У обоих пользователей отображается код соперника в реальном времени
    
- summary: |
    Проверка отправки сообщений сопернику во время игры
  requirement: |
    У пользователей должна быть возможность переписываться в чате во время игры
  prerequisites: |
    Выполнен вход, открыта заранее созданная игра 
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Пишем в чате сообщение «Hello!»
  expected-result: |
    Сообщение отправлено
    
- summary: |
    Проверка возможности проверки своего решения во время игры
  requirement: |
    У пользователя должна быть возможность проверить своё решение в ходе игры
  prerequisites: |
    Выполнен вход, открыта заранее созданная игра 
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Нажимаем на кнопку «Run» или сочетание клавиш Ctrl+Enter/Cmd+Enter
  expected-result: |
    Во вкладке output появилась проверка решения
    
- summary: |
    Проверка возможности вернуться в игру, если случайно закрыл вкладку
  requirement: |
    У пользователя должна быть возможность вернуться в игру после закрытия вкладки, если время не истекло, а соперник не победил
  prerequisites: |
    Выполнен вход, открыта заранее созданная игра 
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Закрываем вкладку с игрой
    - Снова открываем главную страницу сайта 
  expected-result: |
    Закрытая игра отображается на главной, в неё можно вернуться
    
- summary: |
    Проверка верного решения в игре
  requirement: |
    Пользователь должен победить, если раньше составил верное решение
  prerequisites: |
    Выполнен вход, открыта главная страница сайта https://codebattle.hexlet.io/#lobby
  test-data: |
    Решение:
    const _ = require("lodash");
    const R = require("rambda");
    const solution = (width, length) => {
    return width * length;
    };
    module.exports = solution;
  steps:
    - Нажимаем на кнопку «Create a game» 
    - Выбираем параметры 1 сложность, with a bot, rect_area
    - Выбираем NodeJS
    - Вставляем решение
  expected-result: |
    Пользователь победил, как только вставил нужное решение
    
- summary: |
    Проверка возможности сдаться в игре
  requirement: |
    Пользователь должен победить, если раньше составил верное решение
  prerequisites: |
    Выполнен вход, открыта заранее созданная игра с ботом
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Нажимаем на кнопку «Give up» 
  expected-result: |
    Пользователь проиграл, но может продолжать искать решение задачи
    
- summary: |
    Проверка возможности создать турнир
  requirement: |
    У пользователя должна быть возможность создать свой собственный турнир
  prerequisites: |
    Выполнен вход на сайт, открыта главная страница сайта https://codebattle.hexlet.io/#lobby
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Открываем вкладку Tournaments
    - Нажимаем «Tournaments Info»
    - Вводим название «Test tournament»
    - Выбираем параметры: individual,token
  expected-result: |
    Турнир создан, его можно просмотреть на вкладке турниров
    
- summary: |
    Проверка возможности присоединиться к чужому турниру и выйти из него
  requirement: |
    У пользователя должна быть возможность присоединиться к чужому турниру и выйти из него
  prerequisites: |
    Выполнен вход под user 1, открыта главная страница сайта открыта главная страница сайта https://codebattle.hexlet.io/#lobby
  test-data: |
    user 1 login password, user 2 login password
  steps:
    - Открываем вкладку Tournaments
    - Нажимаем «Tournaments Info»
    - Вводим название «Test tournament»
    - Выбираем параметры: versus
    - Заходим под user 2
    - Открываем вкладку Tournaments
    - Находим «Test tournament»
    - Нажимаем кнопку «Show»
    - Нажимаем кнопку «Join»
    - Нажимаем кнопку «Leave»
  expected-result: |
    Пользователь сначала присоединился к турниру, а потом покинул его
    
- summary: |
    Проверка оптимизации сайта для мобильных устройств
  requirement: |
    Сайт должен быть оптимизирован для мобильных устройств
  prerequisites: |
    открыта главная страница сайта https://codebattle.hexlet.io/#lobby на мобильном устройстве
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Открыть главную страницу сайта в каждом браузере
    - Нажать кнопку «Create a game»
    - Написать что-нибудь в окне для ввода кода
    - Написать в чате «Hello!»
  expected-result: |
    Основной функциолал сайта работает на мобильном устройстве, элементы вёрстки не наезжают друг на друга
    
- summary: |
    Проверка кроссбраузерности
  requirement: |
    Сайт корректно отображается во всех браузерах, можно запустить игру и играть в неё
  prerequisites: |
    Установлены браузеры Google Chrome, Firefox, Safari популярных версий
  test-data: |
    emai = example@gmail.com Пароль = password
  steps:
    - Открыть главную страницу сайта в каждом браузере
    - Нажать кнопку «Create a game»
    - Написать что-нибудь в окне для ввода кода
    - Написать в чате «Hello!»
  expected-result: |
    Основной функционал сайта работает в основных браузерах